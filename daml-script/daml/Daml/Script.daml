daml 1.2
module Daml.Script where

import DA.Optional

data Free f a
  = Pure a
  | Free (f (Free f a))

instance Functor f => Functor (Free f) where
  fmap f (Pure a) = Pure (f a)
  fmap f (Free x) = Free (fmap f <$> x)

instance Functor f => Applicative (Free f) where
  pure = Pure
  Pure f <*> Pure a = Pure (f a)
  Pure f <*> Free x = Free (fmap f <$> x)
  Free x <*> my     = Free ((<*> my) <$> x)

instance Functor f => Action (Free f) where
  Pure a >>= f = f a
  Free x >>= f = Free ((>>= f) <$> x)

data ScriptF a
  = Create { party : Party, argC : AnyTemplate, continueC : ContractId () -> a }
  | Exercise { party : Party, tplId : TemplateTypeRep, cId : ContractId (), argE : AnyChoice, continueE : LedgerValue -> a }
  deriving Functor

type Script = Free ScriptF

data LedgerValue = LedgerValue {}

fromLedgerValue : LedgerValue -> a
fromLedgerValue = error "foobar"

createCmd : Template t => Party -> t -> Script (ContractId t)
createCmd party arg = Free (Create party (toAnyTemplate arg) (pure . coerceContractId))

exerciseCmd : forall t c r. Choice t c r => Party -> ContractId t -> c -> Script r
exerciseCmd party cId arg = Free (Exercise party (templateTypeRep @t) (coerceContractId cId) (toAnyChoice @t arg) (pure . fromLedgerValue))

getParty : Text -> Script Party
getParty = pure . fromSome . partyFromText
